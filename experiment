#!/usr/bin/env bash
#set -x

#check the files are tab seperated
#report any lines that do not have the same number of cells to stderr
#clean the data - date ranges, code column is empty
#determine which files contain which data (homicides will only have NF = 4)

#sort files according to entity (column 1)
#create and store key:val array for entity and year
#create a tab separate file containing the header list outlined in asssignment
#use the key:val array to refernce the rows in the cleaned files to build the new data file
#remove temp files

#for arg in "$@"
#do
#    sed -n '1p' $arg > header_extract.tsv\
    # if the word life appears in the current file's header
#    if grep -E -q [Ll]ife header_extract.tsv
#    then
#        # exclude rows that fall outside the date range and those that do not contain a Code in column 2
#        # cut the columns to exclude column 7 (Continent)
#        awk -F'\t' '(int($3) < 2011 || int($3) > 2021) || $2 == ""{next;}{print $0}' $arg | sort -k1 -k3,3n | cut -f1-6 > "_life.tsv"
#        awk 'BEGIN{FS="\t"; OFS=FS}{$7=$2 FS $3}1' _life.tsv | sort -k7 > _tmplife.tsv
#    elif grep -E -q [Gg][Dd][Pp] header_extract.tsv
#    then
#        awk -F'\t' '(int($3) < 2011 || int($3) > 2021) || $2 == ""{next;}{print $0}' $arg | sort -k1 -k3,3n | cut -f1-6 > "_gdp.tsv"
#        awk 'BEGIN{FS="\t"; OFS=FS}{$7=$2 FS $3}1' _gdp.tsv | sort -k7 > _tmpgdp.tsv
#    elif grep -q [Hh]omicide header_extract.tsv
#    then
#        awk -F'\t' '(int($3) < 2011 || int($3) > 2021) || $2 == ""{next;}{print $0}' $arg | sort -k1 -k3,3n | cut -f1-4 > "_homicide.tsv"
#        awk 'BEGIN{FS="\t"; OFS=FS}{$5=$2 FS $3}1' _homicide.tsv | sort -k5 > _tmphomicide.tsv
#    fi
#TODO remove header_extract.tsv
#done

# Process each file
for arg in "$@"; do
    header=$(head -1 "$arg")
    echo "$header" > header_extract.tsv

    if echo "$header" | grep -E -q [Ll]ife; then
        awk -F'\t' 'BEGIN {OFS=FS} (int($3) < 2011 || int($3) > 2021) || $2 == "" {next} {print $0}' "$arg" | sort -k1,1 -k3,3n | cut -f1-6 > _life.tsv
        awk 'BEGIN {FS="\t"; OFS=FS} {$7=$2$3}1' _life.tsv | sort -k1,1 > _tmplife.tsv
    elif echo "$header" | grep -E -q [Gg][Dd][Pp]; then
        awk -F'\t' 'BEGIN {OFS=FS} (int($3) < 2011 || int($3) > 2021) || $2 == "" {next} {print $0}' "$arg" | sort -k1,1 -k3,3n | cut -f1-6 > _gdp.tsv
        awk 'BEGIN {FS="\t"; OFS=FS} {$7=$2$3}1' _gdp.tsv | sort -k1,1 > _tmpgdp.tsv
    elif echo "$header" | grep -q [Hh]omicide; then
        awk -F'\t' 'BEGIN {OFS=FS} (int($3) < 2011 || int($3) > 2021) || $2 == "" {next} {print $0}' "$arg" | sort -k1,1 -k3,3n | cut -f1-4 > _homicide.tsv
        awk 'BEGIN {FS="\t"; OFS=FS} {$7=$2$3}1' _homicide.tsv | sort -k1,1 > _tmphomicide.tsv
    fi
done

#TODO How/why do unique values extract without having to stipulate
# Create file containing unique combination of Code and Year combination
cut -f7 _tmplife.tsv | awk '{print $0}' | sort -u -k1 > _tmpAll
cut -f7 _tmpgdp.tsv |  awk '{print $0}' | sort -u -k1 >> _tmpAll
cut -f7 _tmphomicide.tsv |  awk '{print $0}' | sort -k1 | uniq >> _tmpAll


#create file with all possible Code and Year combinations
#create the key value on the combination and the line as the value
#iterate over the three files starting with gdp, then homicide and life > print output to a file
#cut the data form the file and append to finished file


#https://alexharv074.github.io/2018/09/22/the-four-sql-joins-using-linux-join-and-sort.html
#join -a 1 -a 2 -e NULL -t$"\t" -1 7 -2 7 -o 2.1,2.2,2.3,1.5,1.6,2.4 _tmphomicide.tsv _tmpgdp.tsv> nearly_done

#https://stackoverflow.com/questions/48411579/full-outer-join-on-both-files-by-keeping-certain-columns-in-both-the-files-intac
#(join -a1 -a2 -e NULL -o '1.1 1.2 1.3 1.4 1.5 1.6 2.5 2.6' file1 file2; join -a1 -a2 -e NULL -o '2.1 2.2 2.3 2.4 1.5 1.6 2.5 2.6' file1 file2 )| grep -v '^NULL' | sort -k 1,2 | uniq


awk '
    BEGIN { FS=OFS="\t" }
    NR == FNR {
        if ( FNR == 1 ) {
            print 1, $0
            nf = NF
        }
        else {
            vals[$7] = $0
        }
        next
    }
    FNR > 1 {
        if ( $1 in vals ) {
            $0 = vals[$7]
            delete vals[$7]
        }
        $nf = $nf
        print 2, $7,$1,$2,$3,$5,$6
    }
    END {
        for ( key in vals ) {
            print 2, vals[key]
        }
    }
' _tmpAll _tmpgdp.tsv |
sort -k1,1n -k2 |
cut -f 2- > nearly_there


#for i in $(cat _tmpAll); do   grep -i "$i" _tmphomicide.tsv > almosth; done

#awk 'BEGIN { 
#FS="\t";
#getline
#NR=0
#OFS=FS
#} 
#FNR == NR {
#	key[$1]=$0; print key;
#}
#FNR < NR { 
#	k=$7;
##in both
#	if(k in key) {
#    	delete key[k]
#		print;
#}else{
#		print $1,$2,$3,$4
###only in 2
#	}
#}
#END {
#	for(i in key){
###only in 1
#		print key[i]
#	}
#}' _tmpAll _tmphomicide.tsv | sort >  _almosth


#awk '{
#    map[$1 $2] = $0
#}
#
#END {
#    # Iterate over all keys
#    for (key in map) {
#        print key, map[key]
#    }
#}' _tmpAll _tmphomicide.tsv | sort >  _almosth


#awk 'BEGIN {
#FS="\t";
#getline
#NR=0
#OFS=FS
#}
#FNR == NR {
#	key[$7 $8]=$0;
#}
#FNR < NR {
#	k=$5 $6;
##in both
#	if(k in key) {
#		delete key[k]
#		print;
#	}else{
#		print $0
#only in 2
#	}
#}
#END {
#	for(i in key){
#only in 1
#		print key[i]
#	}
#}' _tmplife.tsv _tmphomicide.tsv >> _almost


#CODE TO JOIN FILES
#awk 'BEGIN{FS="\t"} NR==FNR{ a[$7 FS $8]=$0;next} ($7 FS $8) in a { print $1 $2 } ' _tmpgdp.tsv _tmplife.tsv > nearly_done
#awk ' NR==FNR{ a[$2 FS $3]=$5;next} ($6 FS $7) in a { print $0 FS a[$6 FS $7]} ' file2 file1

#join -1 7 -2 7 -o 1.7 1.1 1.2 1.3 1.4 1.5 1.6 2.5 2.6 _tmplife.tsv _tmpgdp.tsv > merged1.tsv
#join -1 7 -2 5 -o 2.5 1.1 1.2 1.3 1.4 1.5 1.6 2.4 _tmplife.tsv _tmphomicide.tsv > merged2.tsv
#join -1 1 -2 1 -o 1.1 1.2 1.3 1.7 1.8 2.7 1.5 1.6 merged1.tsv merged2.tsv > merged.tsv

#join -1 7 -2 7 -o 1.7 2.7 1.1 1.2 1.3 1.4 1.5 1.6 2.1 2.2 2.3 2.4 2.5 2.6 _tmplife.tsv _tmpgdp.tsv > merged1.tsv 
#join -1 7 -2 5 -o 1.7 2.5 1.1 1.2 1.3 1.4 1.5 1.6 2.1 2.2 2.3 2.4 _tmplife.tsv _tmphomicide.tsv > merged2.tsv 
#join -1 1 -2 1 -o 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 1.10 1.11 1.12 2.1 2.2 2.3 2.4 merged1.tsv merged2.tsv > merged.tsv
