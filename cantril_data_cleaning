#!#!/usr/bin/env bash
# Author: Andre Rampono
# Student: 23840638
set -x
# Data cleaning script to take three arguments, clean the data and send to STDOUT
# TODO Choose tsv checker


#: Check CLI for valid number of arguments
if [[ $# -ne 3 ]]
then
    echo "Usage: $0 <tsv datafile> <tsv datafile> <tsv datafile>." > /dev/stderr
    exit 1
fi

# Check file for validity
for arg in "$@"
do
    if [[ ! -s $arg ]]
    then
        echo "Error: The file $arg does not exist or is not readable." > /dev/stderr
        exit 1
    fi
done

# Check header line for a tab
for arg in "$@"
do
    if head -1 $arg | grep -q ' '
    then
        echo tsv
    else
        echo not a tsv
    fi
done

# Check the number of columns in each file
for arg in "$@"
do
    num_cols=$(head -n1 "$arg" | awk -F'\t' '{print NF}')
    tail -n+2 "$arg" | awk -F'\t' -v num_cols="$num_cols" 'NF != num_cols {print $0}' > /dev/stderr
    exit 1
done

# Check data for data range, sort and ignore "Continent" column for Life and GDP files
for arg in "$@"
do
    awk -F'\t' '(int($3) < 2011 || int($3) > 2021) || $2 == ""{next;}{print $0}' $arg | sort -k1,1 -k3,3n | cut -f1-6 > "_$arg"
done






#TODO Implement a loop to compare the current line NF to the head NF and alert if different
for arg in "$@"
do
    num_tab=$(head -n1 $arg | awk '{print gsub(/\t/,"")}')
#    num_col=$(head -n1 $arg | awk '{print NF}')
    num_col=$(head -n1 $arg | awk -F'\t' '{print NF;exit}')

    echo $num_col
    awk -F'\t' '{print NF}' $arg
    awk -v cols=$num_col '{if (NF != cols) {printf"Line %d missing cells \n ", NR}}' $arg

#    awk -v cols=7  '{if (NF != cols) {printf"Line %d from file is bad  \n", NR}}' $arg
#    echo | awk '{print NF   }'
#    line_tab=$(awk '{print gsub(/\t/,"")}')
#    echo $line_tab
done




#    awk '{if ($line_tab!=$num_tab) {printf"Line %d from file $arg is bad"}}' $arg



#num_cols=$(head -n1 $arg | awk -F'\t' '{print NF;exit}')
#awk -F'\t' 'NF != $num_cols{print NR;exit}' $arg
#awk '{if (NF=$num_cols) {printf"Line %d from file $arg is good", NR}}' $arg
#awk -F'\t' 'NF!=$num_cols{printf "Wrong number of colums at line %d\n", NR}'
#awk -F'\t' 'NF != $num_cols {print}' $@    



